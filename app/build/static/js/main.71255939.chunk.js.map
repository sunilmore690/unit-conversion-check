{"version":3,"sources":["UnitConversion.js","index.js"],"names":["ConversionCheck","state","srcUnit","destUnit","inputValue","result","outputValue","output","units","handleChange","key","e","console","log","target","value","_this","setState","[object Object]","checkConversion","_callee","response","regenerator_default","a","wrap","_context","prev","next","axios","post","Object","objectSpread2","undefined","sent","data","status","input","t0","error","stop","_this2","this","appendClass","react_default","createElement","className","type","id","autoComplete","onChange","map","unit","filter","onClick","Fragment","style","marginLeft","marginTop","Component","rootElement","document","getElementById","ReactDOM","render","StrictMode","UnitConversion"],"mappings":"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","file":"static/js/main.71255939.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./styles.css\";\nimport axios from \"axios\";\nclass ConversionCheck extends Component {\n  state = {\n    srcUnit: \"Fahrenheit\",\n    destUnit: \"Celsius\",\n    inputValue: 1,\n    result: \"\",\n    outputValue: 1,\n    output:1,\n    units: [\n      \"Fahrenheit\",\n      \"Rankine\",\n      \"Kelvin\",\n      \"cups\",\n      \"liters\",\n      \"gallons\",\n      \"Celsius\",\n      \"dog\"\n    ]\n  };\n  handleChange = key => e => {\n    console.log(key, e.target.value);\n    this.setState({ [key]: e.target.value });\n  }\n  checkConversion = async () => {\n    try {\n      console.log(this.state);\n      let response = await axios.post(\"/checkconversion\", {\n        ...this.state,\n        units: undefined\n      });\n      // console.log(\"res\", response.data);\n      this.setState({ result: response.data.status,output:response.data.input });\n    } catch (e) {\n      console.error(e);\n    }\n  };\n  render() {\n    let appendClass = \"circleBase \";\n    if (this.state.result === \"incorrect\") {\n      appendClass += \"danger\";\n    } else if (this.state.result === \"invalid\") {\n      appendClass += \"warning\";\n    } else if (this.state.result === \"correct\") {\n      appendClass += \"success\";\n    }\n    return (\n      <div className=\"row container\">\n        <div>\n          <h4>Unit Conversion Check</h4>\n        </div>\n        <div className=\"col-sm-6\">\n          <div className=\"form-group\">\n            <label>Input Value:</label>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"email\"\n              autoComplete=\"off\"\n              onChange={this.handleChange(\"inputValue\")}\n            />\n          </div>\n          <div className=\"form-group\">\n            <label>Unit of Measure:</label>\n            <select\n              className=\"form-control\"\n              onChange={this.handleChange(\"srcUnit\")}\n            >\n              {this.state.units.map(unit => (\n                <option key={unit} value={unit}>\n                  {unit}\n                </option>\n              ))}\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <label>Target Unit of Measure:</label>\n            <select\n              className=\"form-control\"\n              onChange={this.handleChange(\"destUnit\")}\n              value={this.state.destUnit}\n            >\n              {this.state.units\n                .filter(unit => unit !== this.state.srcUnit)\n                .map(unit => (\n                  <option key={unit} value={unit}>\n                    {unit}\n                  </option>\n                ))}\n            </select>\n          </div>\n          <div className=\"form-group\">\n            <label> Student's numeric response</label>\n            <input\n              type=\"number\"\n              className=\"form-control\"\n              id=\"email\"\n              autoComplete=\"off\"\n              onChange={this.handleChange(\"outputValue\")}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className=\"btn btn-primary\"\n            onClick={this.checkConversion}\n          >\n            Check\n          </button>\n        </div>\n        <div className=\"col-sm-6\">\n          {this.state.result ? (<>\n            <div className={appendClass}>\n              <span>{this.state.result}</span>\n            </div>\n          <div style={{marginLeft:'50px',marginTop:'10px'}}>{this.state.result === 'incorrect'? 'Expected Output: '+this.state.output:''}</div></>\n          ) : (\n            <></>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\nexport default ConversionCheck;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport UnitConversion from \"./UnitConversion\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <UnitConversion />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}